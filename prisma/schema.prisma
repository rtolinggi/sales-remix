// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorys {
  categoryId   Int        @id @default(autoincrement())
  categoryName String     
  product products[]
}

model products {
  productId      Int              @id @default(autoincrement())
  categoryId     Int              
  supplierId     Int             
  productName    String          
  price          Int            
  description    String           
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categorys      categorys?        @relation(fields: [categoryId], references: [categoryId])
  suppliers      suppliers?        @relation(fields: [supplierId], references: [supplierId])
  oreders_detail oreders_detail[]
}

model suppliers {
  supplierId   Int        @id @default(autoincrement())
  supplierName String    
  address      String     @db.Text
  phone        String     
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     products[]
}

model oreders_detail {
  orderId   String
  productId Int         
  quantity  Int
  status    status_order @default(PENDING)
  orders    orders       @relation(fields: [orderId], references: [orderId])
  products  products     @relation(fields: [productId], references: [productId])

  @@id([orderId,productId])
}

enum status_order {
  CONFIRM
  CANCEL
  PENDING
}

model orders {
  orderId        String           @id
  storeId        String          
  employeeId     String          
  orderDate      DateTime         @default(now()) 
  total          Int
  employees      employees        @relation(fields: [employeeId], references: [employeeId])
  stores         stores           @relation(fields: [storeId], references: [storeId])
  oreders_detail oreders_detail[]
}

model employees {
  employeeId String           @id @default(uuid())
  userId     String?          @unique
  firstName  String          
  lastName   String           
  gender     employees_gender
  birthDay   DateTime?        
  address    String?          @db.Text
  phone      String           
  joinDate   DateTime?        
  endDate    DateTime?       
  jobTitle   String           
  image      String           @default("default.jpg")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  users      users?           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  orders     orders[]
  task       tasks[]
}

model verifiedEmail {
  id        Int      @id @default(autoincrement())
  token     String
  expired   Int      @default(3600)
  createdAt DateTime @default(now())
  userId    String   @unique
  user      users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model tasks {
  taskId       Int          @id @default(autoincrement())
  assignTo     String      
  resultId     Int          
  storeId      String       
  status       status
  scheduleDate DateTime     @default(now()) 
  scheduleNext DateTime     
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt 
  result       tasks_result @relation(fields: [resultId], references: [resultId])
  employee     employees    @relation(fields: [assignTo], references: [employeeId])
}

model users {
  userId        String         @id @default(uuid())
  email         String         @unique
  passwordHash  String        
  isActive      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  refreshToken  String?         @db.Text
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  employees     employees?
  verifiedEmail verifiedEmail?
}

model tasks_result {
  resultId Int     @id @default(autoincrement())
  result   String
  task     tasks[]
}

enum status {
  NOTREAD
  READ
  VISITED
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum employees_gender {
  F
  M
}

model stores {
  storeId      String        @id @default(uuid())
  subClusterId Int?         
  storeName    String        
  ownerName    String?       
  address      String        @db.Text
  phone        String        
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  subClusters  sub_clusters? @relation(fields: [subClusterId], references: [id])
  orders       orders[]
}

model sub_clusters {
  id             Int      @id @default(autoincrement())
  clusterId      Int?      
  subClusterName String?  
  clusters       clusters? @relation(fields: [clusterId], references: [clusterId],onDelete: Cascade)
  stores         stores[]
}

model clusters {
  clusterId    Int            @id @default(autoincrement())
  clusterName  String         
  sub_clusters sub_clusters[]
}




